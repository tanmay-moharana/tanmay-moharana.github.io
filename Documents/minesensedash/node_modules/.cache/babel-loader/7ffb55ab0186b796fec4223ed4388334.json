{"ast":null,"code":"import _regeneratorRuntime from\"/Users/tanmaymoharana/Documents/projects/industrial/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";var _marked=/*#__PURE__*/_regeneratorRuntime.mark(forgetUser),_marked2=/*#__PURE__*/_regeneratorRuntime.mark(watchUserForget),_marked3=/*#__PURE__*/_regeneratorRuntime.mark(forgetSaga);import{takeEvery,fork,put,all,call}from'redux-saga/effects';// Login Redux States\nimport{FORGET_USER}from'./actionTypes';import{forgetUserSuccessful,userForgetPasswordError}from'./actions';// AUTH related methods\nimport{postForgetPwd}from'../../../helpers/fackBackend_Helper';import{getFirebaseBackend}from\"../../../helpers/firebase_helper\";//Initilize firebase\nvar fireBaseBackend=getFirebaseBackend();//If user is login then dispatch redux action's are directly from here.\nfunction forgetUser(_ref){var _ref$payload,user,history,response,_response;return _regeneratorRuntime.wrap(function forgetUser$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$payload=_ref.payload,user=_ref$payload.user,history=_ref$payload.history;_context.prev=1;if(!(process.env.REACT_APP_DEFAULTAUTH===\"firebase\")){_context.next=11;break;}_context.next=5;return call(fireBaseBackend.forgetPassword,user.useremail);case 5:response=_context.sent;if(!response){_context.next=9;break;}_context.next=9;return put(forgetUserSuccessful(\"Reset link are sended to your mailbox, check there first\"));case 9:_context.next=17;break;case 11:_context.next=13;return call(postForgetPwd,'/forget-pwd',{email:user.useremail});case 13:_response=_context.sent;if(!_response){_context.next=17;break;}_context.next=17;return put(forgetUserSuccessful(\"Reset link are sended to your mailbox, check there first\"));case 17:_context.next=23;break;case 19:_context.prev=19;_context.t0=_context[\"catch\"](1);_context.next=23;return put(userForgetPasswordError(_context.t0));case 23:case\"end\":return _context.stop();}}},_marked,null,[[1,19]]);}export function watchUserForget(){return _regeneratorRuntime.wrap(function watchUserForget$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return takeEvery(FORGET_USER,forgetUser);case 2:case\"end\":return _context2.stop();}}},_marked2);}function forgetSaga(){return _regeneratorRuntime.wrap(function forgetSaga$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return all([fork(watchUserForget)]);case 2:case\"end\":return _context3.stop();}}},_marked3);}export default forgetSaga;","map":{"version":3,"sources":["/Users/tanmaymoharana/Documents/projects/industrial/dashboard/src/store/auth/forgetpwd/saga.js"],"names":["forgetUser","watchUserForget","forgetSaga","takeEvery","fork","put","all","call","FORGET_USER","forgetUserSuccessful","userForgetPasswordError","postForgetPwd","getFirebaseBackend","fireBaseBackend","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","forgetPassword","useremail","response","email"],"mappings":"6NAcUA,U,iDA0BOC,e,iDAIPC,U,EA5CV,OAASC,SAAT,CAAoBC,IAApB,CAA0BC,GAA1B,CAA+BC,GAA/B,CAAoCC,IAApC,KAAgD,oBAAhD,CAEA;AACA,OAASC,WAAT,KAA4B,eAA5B,CACA,OAASC,oBAAT,CAA+BC,uBAA/B,KAA8D,WAA9D,CAEA;AACA,OAASC,aAAT,KAA8B,qCAA9B,CACA,OAASC,kBAAT,KAAmC,kCAAnC,CAEA;AACA,GAAMC,CAAAA,eAAe,CAAGD,kBAAkB,EAA1C,CAEA;AACA,QAAUZ,CAAAA,UAAV,6LAAuBc,OAAvB,CAAkCC,IAAlC,cAAkCA,IAAlC,CAAwCC,OAAxC,cAAwCA,OAAxC,sBAEeC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,GAAsC,UAFrD,2CAGiC,MAAMZ,CAAAA,IAAI,CAACM,eAAe,CAACO,cAAjB,CAAiCL,IAAI,CAACM,SAAtC,CAAV,CAHjC,OAGsBC,QAHtB,mBAIoBA,QAJpB,yCAKkB,MAAMjB,CAAAA,GAAG,CACPI,oBAAoB,CAClB,0DADkB,CADb,CAAT,CALlB,uDAYiC,MAAMF,CAAAA,IAAI,CAACI,aAAD,CAAgB,aAAhB,CAA+B,CAACY,KAAK,CAAER,IAAI,CAACM,SAAb,CAA/B,CAAV,CAZjC,QAYsBC,SAZtB,mBAaoBA,SAbpB,2CAcoB,MAAMjB,CAAAA,GAAG,CACLI,oBAAoB,CACpB,0DADoB,CADf,CAAT,CAdpB,0GAsBY,MAAMJ,CAAAA,GAAG,CAACK,uBAAuB,aAAxB,CAAT,CAtBZ,qEA0BA,MAAO,SAAUT,CAAAA,eAAV,+IACH,MAAME,CAAAA,SAAS,CAACK,WAAD,CAAcR,UAAd,CAAf,CADG,wDAIP,QAAUE,CAAAA,UAAV,0IACI,MAAMI,CAAAA,GAAG,CAAC,CAACF,IAAI,CAACH,eAAD,CAAL,CAAD,CAAT,CADJ,wDAIA,cAAeC,CAAAA,UAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n// Login Redux States\r\nimport { FORGET_USER } from './actionTypes';\r\nimport { forgetUserSuccessful, userForgetPasswordError } from './actions';\r\n\r\n// AUTH related methods\r\nimport { postForgetPwd } from '../../../helpers/fackBackend_Helper';\r\nimport { getFirebaseBackend } from \"../../../helpers/firebase_helper\";\r\n\r\n//Initilize firebase\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is login then dispatch redux action's are directly from here.\r\nfunction* forgetUser({ payload: { user, history } }) {\r\n        try {\r\n            if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n                const response = yield call(fireBaseBackend.forgetPassword, user.useremail);\r\n                if (response) {\r\n                  yield put(\r\n                    forgetUserSuccessful(\r\n                      \"Reset link are sended to your mailbox, check there first\"\r\n                    )\r\n                  );\r\n                }\r\n            }else{\r\n                const response = yield call(postForgetPwd, '/forget-pwd', {email: user.useremail});\r\n                if (response) {\r\n                    yield put(\r\n                        forgetUserSuccessful(\r\n                        \"Reset link are sended to your mailbox, check there first\"\r\n                      )\r\n                    );\r\n                }\r\n            }            \r\n        } catch (error) {\r\n            yield put(userForgetPasswordError(error));\r\n        }\r\n}\r\n\r\nexport function* watchUserForget() {\r\n    yield takeEvery(FORGET_USER, forgetUser)\r\n}\r\n\r\nfunction* forgetSaga() {\r\n    yield all([fork(watchUserForget)]);\r\n}\r\n\r\nexport default forgetSaga;"]},"metadata":{},"sourceType":"module"}