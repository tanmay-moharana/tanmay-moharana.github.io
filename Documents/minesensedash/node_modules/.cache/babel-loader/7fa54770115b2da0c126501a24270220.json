{"ast":null,"code":"var _jsxFileName = \"/Users/tanmaymoharana/Documents/projects/industrial/dashboard/src/pages/Forms/FormValidations.js\";\nimport React, { Component } from \"react\";\nimport { Row, Col, Card, CardBody, FormGroup, Button, Label, Input, Container, CustomInput, InputGroup, Form, InputGroupAddon } from \"reactstrap\";\nimport { AvForm, AvField, AvInput } from \"availity-reactstrap-validation\"; //Import Breadcrumb\n\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\n\nclass FormValidations extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breadcrumbItems: [{\n        title: \"Forms\",\n        link: \"#\"\n      }, {\n        title: \"Form Validation\",\n        link: \"#\"\n      }],\n      fnm: false,\n      lnm: false,\n      unm: false,\n      city: false,\n      stateV: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.changeHandeler.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    var fnm = document.getElementById(\"validationTooltip01\").value;\n    var lnm = document.getElementById(\"validationTooltip02\").value;\n    var unm = document.getElementById(\"validationTooltipUsername\").value;\n    var city = document.getElementById(\"validationTooltip03\").value;\n    var stateV = document.getElementById(\"validationTooltip04\").value;\n    document.getElementById(\"tooltipForm\").classList.add(\"was-validated\");\n\n    if (fnm === \"\") {\n      this.setState({\n        fnm: false\n      });\n    } else {\n      this.setState({\n        fnm: true\n      });\n    }\n\n    if (lnm === \"\") {\n      this.setState({\n        lnm: false\n      });\n    } else {\n      this.setState({\n        lnm: true\n      });\n    }\n\n    if (unm === \"\") {\n      this.setState({\n        unm: false\n      });\n    } else {\n      this.setState({\n        unm: true\n      });\n    }\n\n    if (city === \"\") {\n      this.setState({\n        city: false\n      });\n    } else {\n      this.setState({\n        city: true\n      });\n    }\n\n    if (stateV === \"\") {\n      this.setState({\n        stateV: false\n      });\n    } else {\n      this.setState({\n        stateV: true\n      });\n    }\n\n    var d1 = document.getElementsByName(\"validate\");\n\n    for (var i = 0; i < d1.length; i++) {\n      d1[i].style.display = \"block\";\n    }\n  } //for change tooltip display propery\n\n\n  changeHandeler(event, eleId) {\n    if (event.target.value !== \"\") document.getElementById(eleId).style.display = \"none\";else document.getElementById(eleId).style.display = \"block\";\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"page-content\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      fluid: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Breadcrumbs, {\n      title: \"Form Validation\",\n      breadcrumbItems: this.state.breadcrumbItems,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xl: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 41\n      }\n    }, \"React Validation - Normal\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-title-desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 41\n      }\n    }, \"Provide valuable, actionable feedback to your users with HTML5 form validation\\u2013available in all our supported browsers.\"), /*#__PURE__*/React.createElement(AvForm, {\n      className: \"needs-validation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationCustom01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 57\n      }\n    }, \"First name\"), /*#__PURE__*/React.createElement(AvField, {\n      name: \"firstname\",\n      placeholder: \"First name\",\n      type: \"text\",\n      errorMessage: \"Enter First Name\",\n      className: \"form-control\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      id: \"validationCustom01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationCustom02\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 57\n      }\n    }, \"Last name\"), /*#__PURE__*/React.createElement(AvField, {\n      name: \"lastname\",\n      placeholder: \"Last name\",\n      type: \"text\",\n      errorMessage: \"Enter Last name\",\n      className: \"form-control\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      id: \"validationCustom02\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 57\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationCustom03\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 57\n      }\n    }, \"City\"), /*#__PURE__*/React.createElement(AvField, {\n      name: \"city\",\n      placeholder: \"City\",\n      type: \"text\",\n      errorMessage: \" Please provide a valid city.\",\n      className: \"form-control\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      id: \"validationCustom03\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationCustom04\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 57\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(AvField, {\n      name: \"state\",\n      placeholder: \"State\",\n      type: \"text\",\n      errorMessage: \"Please provide a valid state.\",\n      className: \"form-control\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      id: \"validationCustom04\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 57\n      }\n    }))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationCustom05\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 57\n      }\n    }, \"Zip\"), /*#__PURE__*/React.createElement(AvField, {\n      name: \"zip\",\n      placeholder: \"Zip Code\",\n      type: \"text\",\n      errorMessage: \" Please provide a valid zip.\",\n      className: \"form-control\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      id: \"validationCustom05\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 57\n      }\n    })))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(AvInput, {\n      tag: CustomInput,\n      type: \"checkbox\",\n      label: \"Agree to terms and conditions\",\n      id: \"invalidCheck\",\n      name: \"condition\",\n      errorMessage: \"You must agree before submitting.\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 57\n      }\n    })))), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 45\n      }\n    }, \"Submit form\"))))), /*#__PURE__*/React.createElement(Col, {\n      xl: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 41\n      }\n    }, \"Bootstrap Validation (Tooltips)\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-title-desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 41\n      }\n    }, \"If your form layout allows it, you can swap the \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 120\n      }\n    }, \".-feedback\"), \" classes for \", /*#__PURE__*/React.createElement(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 156\n      }\n    }, \".-tooltip\"), \" classes to display validation feedback in a styled tooltip.\"), /*#__PURE__*/React.createElement(Form, {\n      className: \"needs-validation\",\n      method: \"post\",\n      id: \"tooltipForm\",\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationTooltip01\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 57\n      }\n    }, \"First name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"validationTooltip01\",\n      placeholder: \"First name\",\n      onChange: event => this.changeHandeler(event, \"validate1\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.fnm === true ? \"valid-tooltip\" : \"invalid-tooltip\",\n      name: \"validate\",\n      id: \"validate1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 57\n      }\n    }, this.state.fnm === true ? \"Looks good!\" : \"Please Enter Valid First Name\"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationTooltip02\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 57\n      }\n    }, \"Last name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"validationTooltip02\",\n      placeholder: \"Last name\",\n      onChange: event => this.changeHandeler(event, \"validate2\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.lnm === true ? \"valid-tooltip\" : \"invalid-tooltip\",\n      name: \"validate\",\n      id: \"validate2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 57\n      }\n    }, this.state.lnm === true ? \"Looks good!\" : \"Please Enter Valid Last Name\"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationTooltipUsername\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 57\n      }\n    }, \"Username\"), /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(InputGroupAddon, {\n      addonType: \"prepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"input-group-text\",\n      id: \"validationTooltipUsernamePrepend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 61\n      }\n    }, \"@\")), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"validationTooltipUsername\",\n      placeholder: \"Username\",\n      onChange: event => this.changeHandeler(event, \"validate3\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 61\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.unm === true ? \"valid-tooltip\" : \"invalid-tooltip\",\n      name: \"validate\",\n      id: \"validate3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 61\n      }\n    }, this.state.unm === true ? \"Looks good!\" : \"Please choose a unique and valid username.\"))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationTooltip03\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 57\n      }\n    }, \"City\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"validationTooltip03\",\n      placeholder: \"City\",\n      onChange: event => this.changeHandeler(event, \"validate4\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.city === true ? \"valid-tooltip\" : \"invalid-tooltip\",\n      name: \"validate\",\n      id: \"validate4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 57\n      }\n    }, this.state.city === true ? \"Looks good!\" : \"Please choose a unique and valid username.Please provide a valid city.\"))), /*#__PURE__*/React.createElement(Col, {\n      md: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"position-relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      htmlFor: \"validationTooltip04\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 57\n      }\n    }, \"State\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      className: \"form-control\",\n      id: \"validationTooltip04\",\n      placeholder: \"State\",\n      onChange: event => this.changeHandeler(event, \"validate5\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 57\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: this.state.stateV === true ? \"valid-tooltip\" : \"invalid-tooltip\",\n      name: \"validate\",\n      id: \"validate5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 57\n      }\n    }, this.state.stateV === true ? \"Looks good!\" : \"Please provide a valid state.\")))), /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 45\n      }\n    }, \"Submit form\")))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      lg: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 21\n      }\n    }, \"Validation type\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-title-desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 21\n      }\n    }, \"Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server.\"), /*#__PURE__*/React.createElement(AvForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AvField, {\n      name: \"username\",\n      label: \"Required  \",\n      placeholder: \"Type Something\",\n      type: \"text\",\n      errorMessage: \"Enter Name\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 23\n      }\n    }, \"Equal To\"), /*#__PURE__*/React.createElement(AvField, {\n      name: \"password\",\n      type: \"text\",\n      placeholder: \"Password\",\n      errorMessage: \"Enter password\",\n      validate: {\n        required: {\n          value: true\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"password1\",\n      type: \"text\",\n      placeholder: \"Re-type Password\",\n      errorMessage: \"Enter Re-password\",\n      validate: {\n        required: {\n          value: true\n        },\n        match: {\n          value: \"password\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"email\",\n      label: \"E-Mail  \",\n      placeholder: \"Enter Valid Email\",\n      type: \"email\",\n      errorMessage: \"Invalid Email\",\n      validate: {\n        required: {\n          value: true\n        },\n        email: {\n          value: true\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"digits\",\n      label: \"Digits  \",\n      placeholder: \"Enter Only Digits\",\n      type: \"number\",\n      errorMessage: \"Enter Only Digits\",\n      validate: {\n        required: {\n          value: true\n        },\n        pattern: {\n          value: \"^[0-9]+$\",\n          errorMessage: \"Only Digits\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"number\",\n      label: \"Number  \",\n      placeholder: \"Enter Only number\",\n      type: \"number\",\n      errorMessage: \"Enter Only Number\",\n      validate: {\n        required: {\n          value: true\n        },\n        pattern: {\n          value: \"^[0-9]+$\",\n          errorMessage: \"Only Numbers\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"alphanumeric\",\n      label: \"Alphanumeric  \",\n      placeholder: \"Enter Only alphanumeric value\",\n      type: \"text\",\n      errorMessage: \"Enter Only Alphanumeric\",\n      validate: {\n        required: {\n          value: true\n        },\n        pattern: {\n          value: \"^[0-9a-zA-Z]+$\",\n          errorMessage: \"Only Alphanumeric\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      className: \"mr-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 27\n      }\n    }, \"Submit\"), \" \", /*#__PURE__*/React.createElement(Button, {\n      type: \"reset\",\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 27\n      }\n    }, \"Cancel\"))))))), /*#__PURE__*/React.createElement(Col, {\n      lg: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"card-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 21\n      }\n    }, \"Range validation\"), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"card-title-desc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 21\n      }\n    }, \"Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server.\"), /*#__PURE__*/React.createElement(AvForm, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(AvField, {\n      name: \"Min_Length\",\n      label: \"Min Length  \",\n      placeholder: \"Min 6 chars\",\n      type: \"number\",\n      errorMessage: \"Min 6 chars.\",\n      validate: {\n        required: {\n          value: true\n        },\n        minLength: {\n          value: 6,\n          errorMessage: \"Min 6 chars.\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"Max_Length\",\n      label: \"Max Length  \",\n      placeholder: \"Max 6 chars\",\n      type: \"number\",\n      errorMessage: \"Max 6 chars.\",\n      validate: {\n        required: {\n          value: true\n        },\n        maxLength: {\n          value: 6,\n          errorMessage: \"Max 6 chars.\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"Range_Length\",\n      label: \"Range Length  \",\n      placeholder: \"Text between 5 - 10 chars length\",\n      type: \"text\",\n      errorMessage: \"range between 5 to 10\",\n      validate: {\n        required: {\n          value: true\n        },\n        minLength: {\n          value: 5\n        },\n        maxLength: {\n          value: 10\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"Min_Value\",\n      label: \"Min Value  \",\n      placeholder: \"Min 6 Chars\",\n      min: 6,\n      type: \"text\",\n      errorMessage: \"Min Value 6\",\n      validate: {\n        required: {\n          value: true\n        },\n        min: {\n          value: 6\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"Max_Value\",\n      label: \"Max Value  \",\n      placeholder: \"max 5 Chars\",\n      max: 6,\n      type: \"number\",\n      errorMessage: \"Max Value 6\",\n      validate: {\n        required: {\n          value: true\n        },\n        max: {\n          value: 6\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"Range_Value\",\n      label: \"Range Value  \",\n      placeholder: \"This value should be between 6 and 100.\",\n      type: \"number\",\n      errorMessage: \"range between 5 to 10\",\n      validate: {\n        required: {\n          value: true\n        },\n        min: {\n          value: 6\n        },\n        max: {\n          value: 100\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(AvField, {\n      name: \"Regular_Exp\",\n      label: \"Regular Exp  \",\n      placeholder: \"Hex. Color\",\n      type: \"number\",\n      errorMessage: \"Hex Value\",\n      validate: {\n        required: {\n          value: true\n        },\n        pattern: {\n          value: \"^[#0-9]+$\",\n          errorMessage: \"Only Hex Value\"\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 23\n      }\n    }), /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"mb-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      color: \"primary\",\n      className: \"mr-1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 27\n      }\n    }, \"Submit\"), \" \", /*#__PURE__*/React.createElement(Button, {\n      type: \"reset\",\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 27\n      }\n    }, \"Cancel\")))))))))));\n  }\n\n}\n\nexport default FormValidations;","map":{"version":3,"sources":["/Users/tanmaymoharana/Documents/projects/industrial/dashboard/src/pages/Forms/FormValidations.js"],"names":["React","Component","Row","Col","Card","CardBody","FormGroup","Button","Label","Input","Container","CustomInput","InputGroup","Form","InputGroupAddon","AvForm","AvField","AvInput","Breadcrumbs","FormValidations","constructor","props","state","breadcrumbItems","title","link","fnm","lnm","unm","city","stateV","handleSubmit","bind","changeHandeler","e","preventDefault","document","getElementById","value","classList","add","setState","d1","getElementsByName","i","length","style","display","event","eleId","target","render","required","match","email","pattern","errorMessage","minLength","maxLength","min","max"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { Row, Col, Card, CardBody, FormGroup, Button, Label, Input ,Container, CustomInput, InputGroup, Form, InputGroupAddon } from \"reactstrap\";\r\nimport { AvForm, AvField, AvInput } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\r\n\r\nclass FormValidations extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      breadcrumbItems : [\r\n        { title : \"Forms\", link : \"#\" },\r\n        { title : \"Form Validation\", link : \"#\" },\r\n      ],\r\n      fnm : false,\r\n      lnm: false,\r\n      unm: false,\r\n      city: false,\r\n      stateV: false,\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.changeHandeler.bind(this);\r\n  }\r\n\r\n  handleSubmit(e){\r\n    e.preventDefault();\r\n     var fnm = document.getElementById(\"validationTooltip01\").value;\r\n    var lnm = document.getElementById(\"validationTooltip02\").value;\r\n    var unm = document.getElementById(\"validationTooltipUsername\").value;\r\n    var city = document.getElementById(\"validationTooltip03\").value;\r\n    var stateV = document.getElementById(\"validationTooltip04\").value;\r\n    document.getElementById(\"tooltipForm\").classList.add(\"was-validated\");\r\n\r\n     if( fnm === \"\" ) { this.setState({fnm : false}) }\r\n       else { this.setState({fnm : true}) }\r\n\r\n    if( lnm === \"\" ) { this.setState({lnm : false}) }\r\n      else { this.setState({lnm : true}) }\r\n\r\n    if( unm === \"\" ) { this.setState({unm : false}) }\r\n      else { this.setState({unm : true}) }\r\n\r\n    if( city === \"\" ) { this.setState({city : false}) }\r\n      else { this.setState({city : true}) }\r\n\r\n    if( stateV === \"\" ) { this.setState({stateV : false}) }\r\n      else { this.setState({stateV : true}) }\r\n\r\n      var d1 = document.getElementsByName(\"validate\");\r\n\r\n      \r\n\r\n      for( var i =0; i<d1.length ; i++){\r\n        d1[i].style.display = \"block\";\r\n      }\r\n  }\r\n\r\n  //for change tooltip display propery\r\n  changeHandeler(event,eleId){\r\n    if (event.target.value !== \"\")\r\n      document.getElementById(eleId).style.display = \"none\";\r\n    else\r\n    document.getElementById(eleId).style.display = \"block\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\">\r\n          <Container fluid={true}>\r\n          \r\n          \r\n\r\n          <Breadcrumbs title=\"Form Validation\" breadcrumbItems={this.state.breadcrumbItems} />\r\n            <Row>\r\n                            <Col xl=\"6\">\r\n                                <Card>\r\n                                    <CardBody>\r\n                                        <h4 className=\"card-title\">React Validation - Normal</h4>\r\n                                        <p className=\"card-title-desc\">Provide valuable, actionable feedback to your users with HTML5 form validation–available in all our supported browsers.</p>\r\n                                        <AvForm className=\"needs-validation\" >\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom01\">First name</Label>\r\n                                                        <AvField\r\n                                                          name=\"firstname\"\r\n                                                          placeholder=\"First name\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\"Enter First Name\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom01\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom02\">Last name</Label>\r\n                                                        <AvField\r\n                                                          name=\"lastname\"\r\n                                                          placeholder=\"Last name\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\"Enter Last name\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom02\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom03\">City</Label>\r\n                                                        <AvField\r\n                                                          name=\"city\"\r\n                                                          placeholder=\"City\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\" Please provide a valid city.\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom03\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom04\">State</Label>\r\n                                                        <AvField\r\n                                                          name=\"state\"\r\n                                                          placeholder=\"State\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\"Please provide a valid state.\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom04\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom05\">Zip</Label>\r\n                                                        <AvField\r\n                                                          name=\"zip\"\r\n                                                          placeholder=\"Zip Code\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\" Please provide a valid zip.\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom05\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col lg=\"12\">\r\n                                                    <FormGroup>\r\n                                                        <AvInput tag={CustomInput} type=\"checkbox\" label=\"Agree to terms and conditions\" id=\"invalidCheck\" name=\"condition\" errorMessage=\"You must agree before submitting.\"  validate={{ required: { value: true } }} />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Button color=\"primary\" type=\"submit\">Submit form</Button>\r\n                                        </AvForm>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col> \r\n        \r\n                            <Col xl=\"6\">\r\n                                <Card>\r\n                                    <CardBody>\r\n                                        <h4 className=\"card-title\">Bootstrap Validation (Tooltips)</h4>\r\n                                        <p className=\"card-title-desc\">If your form layout allows it, you can swap the <code>.-feedback</code> classes for <code>.-tooltip</code> classes to display validation feedback in a styled tooltip.</p>\r\n                                        <Form className=\"needs-validation\" method=\"post\" id=\"tooltipForm\" onSubmit={this.handleSubmit}>\r\n                                            <Row>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip01\">First name</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip01\" placeholder=\"First name\" onChange={(event) => this.changeHandeler(event,\"validate1\")}/>\r\n                                                        \r\n                                                        <div className={this.state.fnm === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate1\">\r\n                                                            {this.state.fnm === true ? \"Looks good!\" : \"Please Enter Valid First Name\"}\r\n                                                        </div>\r\n                                                                                                                \r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip02\">Last name</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip02\" placeholder=\"Last name\" onChange={(event) => this.changeHandeler(event,\"validate2\")}/>\r\n                                                        <div className={this.state.lnm === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate2\">\r\n                                                        {this.state.lnm === true ? \"Looks good!\" : \"Please Enter Valid Last Name\"}\r\n                                                        </div>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltipUsername\">Username</Label>\r\n                                                        <InputGroup>\r\n                                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                            <span className=\"input-group-text\" id=\"validationTooltipUsernamePrepend\">@</span>\r\n                                                            </InputGroupAddon>\r\n                                                            <Input type=\"text\" className=\"form-control\" id=\"validationTooltipUsername\" placeholder=\"Username\" onChange={(event) => this.changeHandeler(event,\"validate3\")}/>\r\n                                                            <div className={this.state.unm === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate3\">\r\n                                                            {this.state.unm === true ? \"Looks good!\" : \"Please choose a unique and valid username.\"}\r\n                                                            </div>\r\n                                                        </InputGroup>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip03\">City</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip03\" placeholder=\"City\" onChange={(event) => this.changeHandeler(event,\"validate4\")}/>\r\n                                                        <div className={this.state.city === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate4\">\r\n                                                        {this.state.city === true ? \"Looks good!\" : \"Please choose a unique and valid username.Please provide a valid city.\"}\r\n                                                        </div>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip04\">State</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip04\" placeholder=\"State\" onChange={(event) => this.changeHandeler(event,\"validate5\")} />\r\n                                                        <div className={this.state.stateV === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate5\">\r\n                                                        {this.state.stateV === true ? \"Looks good!\" : \"Please provide a valid state.\"}\r\n                                                        </div>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Button color=\"primary\" type=\"submit\">Submit form</Button>\r\n                                        </Form>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col> \r\n                        </Row>\r\n            <Row>\r\n              <Col lg={6}>\r\n                <Card>\r\n                  <CardBody>\r\n                    <h4 className=\"card-title\">Validation type</h4>\r\n                    <p className=\"card-title-desc\">\r\n                      Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server.\r\n                  </p>\r\n\r\n                    <AvForm>\r\n                      <AvField\r\n                        name=\"username\"\r\n                        label=\"Required  \"\r\n                        placeholder=\"Type Something\"\r\n                        type=\"text\"\r\n                        errorMessage=\"Enter Name\"\r\n                        validate={{ required: { value: true } }}\r\n                      />\r\n                      <Label>Equal To</Label>\r\n                      <AvField\r\n                        name=\"password\"\r\n                        type=\"text\"\r\n                        placeholder=\"Password\"\r\n                        errorMessage=\"Enter password\"\r\n                        validate={{ required: { value: true } }}\r\n                      />\r\n                      <AvField\r\n                        name=\"password1\"\r\n                        type=\"text\"\r\n                        placeholder=\"Re-type Password\"\r\n                        errorMessage=\"Enter Re-password\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          match: { value: \"password\" }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"email\"\r\n                        label=\"E-Mail  \"\r\n                        placeholder=\"Enter Valid Email\"\r\n                        type=\"email\"\r\n                        errorMessage=\"Invalid Email\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          email: { value: true }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"digits\"\r\n                        label=\"Digits  \"\r\n                        placeholder=\"Enter Only Digits\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Enter Only Digits\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[0-9]+$\",\r\n                            errorMessage: \"Only Digits\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"number\"\r\n                        label=\"Number  \"\r\n                        placeholder=\"Enter Only number\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Enter Only Number\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[0-9]+$\",\r\n                            errorMessage: \"Only Numbers\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"alphanumeric\"\r\n                        label=\"Alphanumeric  \"\r\n                        placeholder=\"Enter Only alphanumeric value\"\r\n                        type=\"text\"\r\n                        errorMessage=\"Enter Only Alphanumeric\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[0-9a-zA-Z]+$\",\r\n                            errorMessage: \"Only Alphanumeric\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <FormGroup className=\"mb-0\">\r\n                        <div>\r\n                          <Button type=\"submit\" color=\"primary\" className=\"mr-1\">\r\n                            Submit\r\n                        </Button>{\" \"}\r\n                          <Button type=\"reset\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </AvForm>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col lg={6}>\r\n                <Card>\r\n                  <CardBody>\r\n                    <h4 className=\"card-title\">Range validation</h4>\r\n                    <p className=\"card-title-desc\">\r\n                      Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server.\r\n                  </p>\r\n\r\n                    <AvForm>\r\n                      <AvField\r\n                        name=\"Min_Length\"\r\n                        label=\"Min Length  \"\r\n                        placeholder=\"Min 6 chars\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Min 6 chars.\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          minLength: { value: 6, errorMessage: \"Min 6 chars.\" }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Max_Length\"\r\n                        label=\"Max Length  \"\r\n                        placeholder=\"Max 6 chars\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Max 6 chars.\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          maxLength: { value: 6, errorMessage: \"Max 6 chars.\" }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Range_Length\"\r\n                        label=\"Range Length  \"\r\n                        placeholder=\"Text between 5 - 10 chars length\"\r\n                        type=\"text\"\r\n                        errorMessage=\"range between 5 to 10\"\r\n                        validate={{ required: { value: true },\r\n                        minLength: { value: 5 },\r\n                        maxLength: { value: 10 }\r\n                      }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Min_Value\"\r\n                        label=\"Min Value  \"\r\n                        placeholder=\"Min 6 Chars\"\r\n                        min={6}\r\n                        type=\"text\"\r\n                        errorMessage=\"Min Value 6\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          min: { value: 6 }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Max_Value\"\r\n                        label=\"Max Value  \"\r\n                        placeholder=\"max 5 Chars\"\r\n                        max={6}\r\n                        type=\"number\"\r\n                        errorMessage=\"Max Value 6\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          max: { value: 6 }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Range_Value\"\r\n                        label=\"Range Value  \"\r\n                        placeholder=\"This value should be between 6 and 100.\"\r\n                        type=\"number\"\r\n                        errorMessage=\"range between 5 to 10\"\r\n                        validate={{ required: { value: true },\r\n                        min: { value: 6 },\r\n                        max: { value: 100 }\r\n                      }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Regular_Exp\"\r\n                        label=\"Regular Exp  \"\r\n                        placeholder=\"Hex. Color\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Hex Value\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[#0-9]+$\",\r\n                            errorMessage: \"Only Hex Value\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <FormGroup className=\"mb-0\">\r\n                        <div>\r\n                          <Button type=\"submit\" color=\"primary\" className=\"mr-1\">\r\n                            Submit\r\n                        </Button>{\" \"}\r\n                          <Button type=\"reset\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </AvForm>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n\r\n          </Container>\r\n          </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormValidations;\r\n"]},"metadata":{},"sourceType":"module"}