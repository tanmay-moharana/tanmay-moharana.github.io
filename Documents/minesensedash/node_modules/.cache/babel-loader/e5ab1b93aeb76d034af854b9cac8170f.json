{"ast":null,"code":"import _classCallCheck from\"/Users/tanmaymoharana/Documents/projects/industrial/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tanmaymoharana/Documents/projects/industrial/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _assertThisInitialized from\"/Users/tanmaymoharana/Documents/projects/industrial/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/tanmaymoharana/Documents/projects/industrial/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/tanmaymoharana/Documents/projects/industrial/dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{Row,Col,Card,CardBody,FormGroup,Button,Label,Input,Container,CustomInput,InputGroup,Form,InputGroupAddon}from\"reactstrap\";import{AvForm,AvField,AvInput}from\"availity-reactstrap-validation\";//Import Breadcrumb\nimport Breadcrumbs from'../../components/Common/Breadcrumb';var FormValidations=/*#__PURE__*/function(_Component){_inherits(FormValidations,_Component);var _super=_createSuper(FormValidations);function FormValidations(props){var _this;_classCallCheck(this,FormValidations);_this=_super.call(this,props);_this.state={breadcrumbItems:[{title:\"Forms\",link:\"#\"},{title:\"Form Validation\",link:\"#\"}],fnm:false,lnm:false,unm:false,city:false,stateV:false};_this.handleSubmit=_this.handleSubmit.bind(_assertThisInitialized(_this));_this.changeHandeler.bind(_assertThisInitialized(_this));return _this;}_createClass(FormValidations,[{key:\"handleSubmit\",value:function handleSubmit(e){e.preventDefault();var fnm=document.getElementById(\"validationTooltip01\").value;var lnm=document.getElementById(\"validationTooltip02\").value;var unm=document.getElementById(\"validationTooltipUsername\").value;var city=document.getElementById(\"validationTooltip03\").value;var stateV=document.getElementById(\"validationTooltip04\").value;document.getElementById(\"tooltipForm\").classList.add(\"was-validated\");if(fnm===\"\"){this.setState({fnm:false});}else{this.setState({fnm:true});}if(lnm===\"\"){this.setState({lnm:false});}else{this.setState({lnm:true});}if(unm===\"\"){this.setState({unm:false});}else{this.setState({unm:true});}if(city===\"\"){this.setState({city:false});}else{this.setState({city:true});}if(stateV===\"\"){this.setState({stateV:false});}else{this.setState({stateV:true});}var d1=document.getElementsByName(\"validate\");for(var i=0;i<d1.length;i++){d1[i].style.display=\"block\";}}//for change tooltip display propery\n},{key:\"changeHandeler\",value:function changeHandeler(event,eleId){if(event.target.value!==\"\")document.getElementById(eleId).style.display=\"none\";else document.getElementById(eleId).style.display=\"block\";}},{key:\"render\",value:function render(){var _this2=this;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"page-content\"},/*#__PURE__*/React.createElement(Container,{fluid:true},/*#__PURE__*/React.createElement(Breadcrumbs,{title:\"Form Validation\",breadcrumbItems:this.state.breadcrumbItems}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{xl:\"6\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"h4\",{className:\"card-title\"},\"React Validation - Normal\"),/*#__PURE__*/React.createElement(\"p\",{className:\"card-title-desc\"},\"Provide valuable, actionable feedback to your users with HTML5 form validation\\u2013available in all our supported browsers.\"),/*#__PURE__*/React.createElement(AvForm,{className:\"needs-validation\"},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationCustom01\"},\"First name\"),/*#__PURE__*/React.createElement(AvField,{name:\"firstname\",placeholder:\"First name\",type:\"text\",errorMessage:\"Enter First Name\",className:\"form-control\",validate:{required:{value:true}},id:\"validationCustom01\"}))),/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationCustom02\"},\"Last name\"),/*#__PURE__*/React.createElement(AvField,{name:\"lastname\",placeholder:\"Last name\",type:\"text\",errorMessage:\"Enter Last name\",className:\"form-control\",validate:{required:{value:true}},id:\"validationCustom02\"})))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationCustom03\"},\"City\"),/*#__PURE__*/React.createElement(AvField,{name:\"city\",placeholder:\"City\",type:\"text\",errorMessage:\" Please provide a valid city.\",className:\"form-control\",validate:{required:{value:true}},id:\"validationCustom03\"}))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationCustom04\"},\"State\"),/*#__PURE__*/React.createElement(AvField,{name:\"state\",placeholder:\"State\",type:\"text\",errorMessage:\"Please provide a valid state.\",className:\"form-control\",validate:{required:{value:true}},id:\"validationCustom04\"}))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationCustom05\"},\"Zip\"),/*#__PURE__*/React.createElement(AvField,{name:\"zip\",placeholder:\"Zip Code\",type:\"text\",errorMessage:\" Please provide a valid zip.\",className:\"form-control\",validate:{required:{value:true}},id:\"validationCustom05\"})))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{lg:\"12\"},/*#__PURE__*/React.createElement(FormGroup,null,/*#__PURE__*/React.createElement(AvInput,{tag:CustomInput,type:\"checkbox\",label:\"Agree to terms and conditions\",id:\"invalidCheck\",name:\"condition\",errorMessage:\"You must agree before submitting.\",validate:{required:{value:true}}})))),/*#__PURE__*/React.createElement(Button,{color:\"primary\",type:\"submit\"},\"Submit form\"))))),/*#__PURE__*/React.createElement(Col,{xl:\"6\"},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"h4\",{className:\"card-title\"},\"Bootstrap Validation (Tooltips)\"),/*#__PURE__*/React.createElement(\"p\",{className:\"card-title-desc\"},\"If your form layout allows it, you can swap the \",/*#__PURE__*/React.createElement(\"code\",null,\".-feedback\"),\" classes for \",/*#__PURE__*/React.createElement(\"code\",null,\".-tooltip\"),\" classes to display validation feedback in a styled tooltip.\"),/*#__PURE__*/React.createElement(Form,{className:\"needs-validation\",method:\"post\",id:\"tooltipForm\",onSubmit:this.handleSubmit},/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"position-relative\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationTooltip01\"},\"First name\"),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control\",id:\"validationTooltip01\",placeholder:\"First name\",onChange:function onChange(event){return _this2.changeHandeler(event,\"validate1\");}}),/*#__PURE__*/React.createElement(\"div\",{className:this.state.fnm===true?\"valid-tooltip\":\"invalid-tooltip\",name:\"validate\",id:\"validate1\"},this.state.fnm===true?\"Looks good!\":\"Please Enter Valid First Name\"))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"position-relative\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationTooltip02\"},\"Last name\"),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control\",id:\"validationTooltip02\",placeholder:\"Last name\",onChange:function onChange(event){return _this2.changeHandeler(event,\"validate2\");}}),/*#__PURE__*/React.createElement(\"div\",{className:this.state.lnm===true?\"valid-tooltip\":\"invalid-tooltip\",name:\"validate\",id:\"validate2\"},this.state.lnm===true?\"Looks good!\":\"Please Enter Valid Last Name\"))),/*#__PURE__*/React.createElement(Col,{md:\"4\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"position-relative\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationTooltipUsername\"},\"Username\"),/*#__PURE__*/React.createElement(InputGroup,null,/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(\"span\",{className:\"input-group-text\",id:\"validationTooltipUsernamePrepend\"},\"@\")),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control\",id:\"validationTooltipUsername\",placeholder:\"Username\",onChange:function onChange(event){return _this2.changeHandeler(event,\"validate3\");}}),/*#__PURE__*/React.createElement(\"div\",{className:this.state.unm===true?\"valid-tooltip\":\"invalid-tooltip\",name:\"validate\",id:\"validate3\"},this.state.unm===true?\"Looks good!\":\"Please choose a unique and valid username.\"))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"position-relative\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationTooltip03\"},\"City\"),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control\",id:\"validationTooltip03\",placeholder:\"City\",onChange:function onChange(event){return _this2.changeHandeler(event,\"validate4\");}}),/*#__PURE__*/React.createElement(\"div\",{className:this.state.city===true?\"valid-tooltip\":\"invalid-tooltip\",name:\"validate\",id:\"validate4\"},this.state.city===true?\"Looks good!\":\"Please choose a unique and valid username.Please provide a valid city.\"))),/*#__PURE__*/React.createElement(Col,{md:\"6\"},/*#__PURE__*/React.createElement(FormGroup,{className:\"position-relative\"},/*#__PURE__*/React.createElement(Label,{htmlFor:\"validationTooltip04\"},\"State\"),/*#__PURE__*/React.createElement(Input,{type:\"text\",className:\"form-control\",id:\"validationTooltip04\",placeholder:\"State\",onChange:function onChange(event){return _this2.changeHandeler(event,\"validate5\");}}),/*#__PURE__*/React.createElement(\"div\",{className:this.state.stateV===true?\"valid-tooltip\":\"invalid-tooltip\",name:\"validate\",id:\"validate5\"},this.state.stateV===true?\"Looks good!\":\"Please provide a valid state.\")))),/*#__PURE__*/React.createElement(Button,{color:\"primary\",type:\"submit\"},\"Submit form\")))))),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(Col,{lg:6},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"h4\",{className:\"card-title\"},\"Validation type\"),/*#__PURE__*/React.createElement(\"p\",{className:\"card-title-desc\"},\"Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server.\"),/*#__PURE__*/React.createElement(AvForm,null,/*#__PURE__*/React.createElement(AvField,{name:\"username\",label:\"Required  \",placeholder:\"Type Something\",type:\"text\",errorMessage:\"Enter Name\",validate:{required:{value:true}}}),/*#__PURE__*/React.createElement(Label,null,\"Equal To\"),/*#__PURE__*/React.createElement(AvField,{name:\"password\",type:\"text\",placeholder:\"Password\",errorMessage:\"Enter password\",validate:{required:{value:true}}}),/*#__PURE__*/React.createElement(AvField,{name:\"password1\",type:\"text\",placeholder:\"Re-type Password\",errorMessage:\"Enter Re-password\",validate:{required:{value:true},match:{value:\"password\"}}}),/*#__PURE__*/React.createElement(AvField,{name:\"email\",label:\"E-Mail  \",placeholder:\"Enter Valid Email\",type:\"email\",errorMessage:\"Invalid Email\",validate:{required:{value:true},email:{value:true}}}),/*#__PURE__*/React.createElement(AvField,{name:\"digits\",label:\"Digits  \",placeholder:\"Enter Only Digits\",type:\"number\",errorMessage:\"Enter Only Digits\",validate:{required:{value:true},pattern:{value:\"^[0-9]+$\",errorMessage:\"Only Digits\"}}}),/*#__PURE__*/React.createElement(AvField,{name:\"number\",label:\"Number  \",placeholder:\"Enter Only number\",type:\"number\",errorMessage:\"Enter Only Number\",validate:{required:{value:true},pattern:{value:\"^[0-9]+$\",errorMessage:\"Only Numbers\"}}}),/*#__PURE__*/React.createElement(AvField,{name:\"alphanumeric\",label:\"Alphanumeric  \",placeholder:\"Enter Only alphanumeric value\",type:\"text\",errorMessage:\"Enter Only Alphanumeric\",validate:{required:{value:true},pattern:{value:\"^[0-9a-zA-Z]+$\",errorMessage:\"Only Alphanumeric\"}}}),/*#__PURE__*/React.createElement(FormGroup,{className:\"mb-0\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{type:\"submit\",color:\"primary\",className:\"mr-1\"},\"Submit\"),\" \",/*#__PURE__*/React.createElement(Button,{type:\"reset\",color:\"secondary\"},\"Cancel\"))))))),/*#__PURE__*/React.createElement(Col,{lg:6},/*#__PURE__*/React.createElement(Card,null,/*#__PURE__*/React.createElement(CardBody,null,/*#__PURE__*/React.createElement(\"h4\",{className:\"card-title\"},\"Range validation\"),/*#__PURE__*/React.createElement(\"p\",{className:\"card-title-desc\"},\"Parsley is a availity reactstrap validation. It helps you provide your users with feedback on their form submission before sending it to your server.\"),/*#__PURE__*/React.createElement(AvForm,null,/*#__PURE__*/React.createElement(AvField,{name:\"Min_Length\",label:\"Min Length  \",placeholder:\"Min 6 chars\",type:\"number\",errorMessage:\"Min 6 chars.\",validate:{required:{value:true},minLength:{value:6,errorMessage:\"Min 6 chars.\"}}}),/*#__PURE__*/React.createElement(AvField,{name:\"Max_Length\",label:\"Max Length  \",placeholder:\"Max 6 chars\",type:\"number\",errorMessage:\"Max 6 chars.\",validate:{required:{value:true},maxLength:{value:6,errorMessage:\"Max 6 chars.\"}}}),/*#__PURE__*/React.createElement(AvField,{name:\"Range_Length\",label:\"Range Length  \",placeholder:\"Text between 5 - 10 chars length\",type:\"text\",errorMessage:\"range between 5 to 10\",validate:{required:{value:true},minLength:{value:5},maxLength:{value:10}}}),/*#__PURE__*/React.createElement(AvField,{name:\"Min_Value\",label:\"Min Value  \",placeholder:\"Min 6 Chars\",min:6,type:\"text\",errorMessage:\"Min Value 6\",validate:{required:{value:true},min:{value:6}}}),/*#__PURE__*/React.createElement(AvField,{name:\"Max_Value\",label:\"Max Value  \",placeholder:\"max 5 Chars\",max:6,type:\"number\",errorMessage:\"Max Value 6\",validate:{required:{value:true},max:{value:6}}}),/*#__PURE__*/React.createElement(AvField,{name:\"Range_Value\",label:\"Range Value  \",placeholder:\"This value should be between 6 and 100.\",type:\"number\",errorMessage:\"range between 5 to 10\",validate:{required:{value:true},min:{value:6},max:{value:100}}}),/*#__PURE__*/React.createElement(AvField,{name:\"Regular_Exp\",label:\"Regular Exp  \",placeholder:\"Hex. Color\",type:\"number\",errorMessage:\"Hex Value\",validate:{required:{value:true},pattern:{value:\"^[#0-9]+$\",errorMessage:\"Only Hex Value\"}}}),/*#__PURE__*/React.createElement(FormGroup,{className:\"mb-0\"},/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{type:\"submit\",color:\"primary\",className:\"mr-1\"},\"Submit\"),\" \",/*#__PURE__*/React.createElement(Button,{type:\"reset\",color:\"secondary\"},\"Cancel\")))))))))));}}]);return FormValidations;}(Component);export default FormValidations;","map":{"version":3,"sources":["/Users/tanmaymoharana/Documents/projects/industrial/dashboard/src/pages/Forms/FormValidations.js"],"names":["React","Component","Row","Col","Card","CardBody","FormGroup","Button","Label","Input","Container","CustomInput","InputGroup","Form","InputGroupAddon","AvForm","AvField","AvInput","Breadcrumbs","FormValidations","props","state","breadcrumbItems","title","link","fnm","lnm","unm","city","stateV","handleSubmit","bind","changeHandeler","e","preventDefault","document","getElementById","value","classList","add","setState","d1","getElementsByName","i","length","style","display","event","eleId","target","required","match","email","pattern","errorMessage","minLength","maxLength","min","max"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport { Row, Col, Card, CardBody, FormGroup, Button, Label, Input ,Container, CustomInput, InputGroup, Form, InputGroupAddon } from \"reactstrap\";\r\nimport { AvForm, AvField, AvInput } from \"availity-reactstrap-validation\";\r\n\r\n//Import Breadcrumb\r\nimport Breadcrumbs from '../../components/Common/Breadcrumb';\r\n\r\nclass FormValidations extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      breadcrumbItems : [\r\n        { title : \"Forms\", link : \"#\" },\r\n        { title : \"Form Validation\", link : \"#\" },\r\n      ],\r\n      fnm : false,\r\n      lnm: false,\r\n      unm: false,\r\n      city: false,\r\n      stateV: false,\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.changeHandeler.bind(this);\r\n  }\r\n\r\n  handleSubmit(e){\r\n    e.preventDefault();\r\n     var fnm = document.getElementById(\"validationTooltip01\").value;\r\n    var lnm = document.getElementById(\"validationTooltip02\").value;\r\n    var unm = document.getElementById(\"validationTooltipUsername\").value;\r\n    var city = document.getElementById(\"validationTooltip03\").value;\r\n    var stateV = document.getElementById(\"validationTooltip04\").value;\r\n    document.getElementById(\"tooltipForm\").classList.add(\"was-validated\");\r\n\r\n     if( fnm === \"\" ) { this.setState({fnm : false}) }\r\n       else { this.setState({fnm : true}) }\r\n\r\n    if( lnm === \"\" ) { this.setState({lnm : false}) }\r\n      else { this.setState({lnm : true}) }\r\n\r\n    if( unm === \"\" ) { this.setState({unm : false}) }\r\n      else { this.setState({unm : true}) }\r\n\r\n    if( city === \"\" ) { this.setState({city : false}) }\r\n      else { this.setState({city : true}) }\r\n\r\n    if( stateV === \"\" ) { this.setState({stateV : false}) }\r\n      else { this.setState({stateV : true}) }\r\n\r\n      var d1 = document.getElementsByName(\"validate\");\r\n\r\n      \r\n\r\n      for( var i =0; i<d1.length ; i++){\r\n        d1[i].style.display = \"block\";\r\n      }\r\n  }\r\n\r\n  //for change tooltip display propery\r\n  changeHandeler(event,eleId){\r\n    if (event.target.value !== \"\")\r\n      document.getElementById(eleId).style.display = \"none\";\r\n    else\r\n    document.getElementById(eleId).style.display = \"block\";\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"page-content\">\r\n          <Container fluid={true}>\r\n          \r\n          \r\n\r\n          <Breadcrumbs title=\"Form Validation\" breadcrumbItems={this.state.breadcrumbItems} />\r\n            <Row>\r\n                            <Col xl=\"6\">\r\n                                <Card>\r\n                                    <CardBody>\r\n                                        <h4 className=\"card-title\">React Validation - Normal</h4>\r\n                                        <p className=\"card-title-desc\">Provide valuable, actionable feedback to your users with HTML5 form validation–available in all our supported browsers.</p>\r\n                                        <AvForm className=\"needs-validation\" >\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom01\">First name</Label>\r\n                                                        <AvField\r\n                                                          name=\"firstname\"\r\n                                                          placeholder=\"First name\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\"Enter First Name\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom01\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom02\">Last name</Label>\r\n                                                        <AvField\r\n                                                          name=\"lastname\"\r\n                                                          placeholder=\"Last name\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\"Enter Last name\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom02\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom03\">City</Label>\r\n                                                        <AvField\r\n                                                          name=\"city\"\r\n                                                          placeholder=\"City\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\" Please provide a valid city.\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom03\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom04\">State</Label>\r\n                                                        <AvField\r\n                                                          name=\"state\"\r\n                                                          placeholder=\"State\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\"Please provide a valid state.\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom04\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup>\r\n                                                        <Label htmlFor=\"validationCustom05\">Zip</Label>\r\n                                                        <AvField\r\n                                                          name=\"zip\"\r\n                                                          placeholder=\"Zip Code\"\r\n                                                          type=\"text\"\r\n                                                          errorMessage=\" Please provide a valid zip.\"\r\n                                                          className=\"form-control\"\r\n                                                          validate={{ required: { value: true } }}\r\n                                                          id=\"validationCustom05\"\r\n                                                        />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col lg=\"12\">\r\n                                                    <FormGroup>\r\n                                                        <AvInput tag={CustomInput} type=\"checkbox\" label=\"Agree to terms and conditions\" id=\"invalidCheck\" name=\"condition\" errorMessage=\"You must agree before submitting.\"  validate={{ required: { value: true } }} />\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Button color=\"primary\" type=\"submit\">Submit form</Button>\r\n                                        </AvForm>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col> \r\n        \r\n                            <Col xl=\"6\">\r\n                                <Card>\r\n                                    <CardBody>\r\n                                        <h4 className=\"card-title\">Bootstrap Validation (Tooltips)</h4>\r\n                                        <p className=\"card-title-desc\">If your form layout allows it, you can swap the <code>.-feedback</code> classes for <code>.-tooltip</code> classes to display validation feedback in a styled tooltip.</p>\r\n                                        <Form className=\"needs-validation\" method=\"post\" id=\"tooltipForm\" onSubmit={this.handleSubmit}>\r\n                                            <Row>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip01\">First name</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip01\" placeholder=\"First name\" onChange={(event) => this.changeHandeler(event,\"validate1\")}/>\r\n                                                        \r\n                                                        <div className={this.state.fnm === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate1\">\r\n                                                            {this.state.fnm === true ? \"Looks good!\" : \"Please Enter Valid First Name\"}\r\n                                                        </div>\r\n                                                                                                                \r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip02\">Last name</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip02\" placeholder=\"Last name\" onChange={(event) => this.changeHandeler(event,\"validate2\")}/>\r\n                                                        <div className={this.state.lnm === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate2\">\r\n                                                        {this.state.lnm === true ? \"Looks good!\" : \"Please Enter Valid Last Name\"}\r\n                                                        </div>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"4\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltipUsername\">Username</Label>\r\n                                                        <InputGroup>\r\n                                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                            <span className=\"input-group-text\" id=\"validationTooltipUsernamePrepend\">@</span>\r\n                                                            </InputGroupAddon>\r\n                                                            <Input type=\"text\" className=\"form-control\" id=\"validationTooltipUsername\" placeholder=\"Username\" onChange={(event) => this.changeHandeler(event,\"validate3\")}/>\r\n                                                            <div className={this.state.unm === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate3\">\r\n                                                            {this.state.unm === true ? \"Looks good!\" : \"Please choose a unique and valid username.\"}\r\n                                                            </div>\r\n                                                        </InputGroup>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip03\">City</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip03\" placeholder=\"City\" onChange={(event) => this.changeHandeler(event,\"validate4\")}/>\r\n                                                        <div className={this.state.city === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate4\">\r\n                                                        {this.state.city === true ? \"Looks good!\" : \"Please choose a unique and valid username.Please provide a valid city.\"}\r\n                                                        </div>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                                <Col md=\"6\">\r\n                                                    <FormGroup className=\"position-relative\">\r\n                                                        <Label htmlFor=\"validationTooltip04\">State</Label>\r\n                                                        <Input type=\"text\" className=\"form-control\" id=\"validationTooltip04\" placeholder=\"State\" onChange={(event) => this.changeHandeler(event,\"validate5\")} />\r\n                                                        <div className={this.state.stateV === true ? \"valid-tooltip\" : \"invalid-tooltip\"} name=\"validate\" id=\"validate5\">\r\n                                                        {this.state.stateV === true ? \"Looks good!\" : \"Please provide a valid state.\"}\r\n                                                        </div>\r\n                                                    </FormGroup>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Button color=\"primary\" type=\"submit\">Submit form</Button>\r\n                                        </Form>\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col> \r\n                        </Row>\r\n            <Row>\r\n              <Col lg={6}>\r\n                <Card>\r\n                  <CardBody>\r\n                    <h4 className=\"card-title\">Validation type</h4>\r\n                    <p className=\"card-title-desc\">\r\n                      Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server.\r\n                  </p>\r\n\r\n                    <AvForm>\r\n                      <AvField\r\n                        name=\"username\"\r\n                        label=\"Required  \"\r\n                        placeholder=\"Type Something\"\r\n                        type=\"text\"\r\n                        errorMessage=\"Enter Name\"\r\n                        validate={{ required: { value: true } }}\r\n                      />\r\n                      <Label>Equal To</Label>\r\n                      <AvField\r\n                        name=\"password\"\r\n                        type=\"text\"\r\n                        placeholder=\"Password\"\r\n                        errorMessage=\"Enter password\"\r\n                        validate={{ required: { value: true } }}\r\n                      />\r\n                      <AvField\r\n                        name=\"password1\"\r\n                        type=\"text\"\r\n                        placeholder=\"Re-type Password\"\r\n                        errorMessage=\"Enter Re-password\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          match: { value: \"password\" }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"email\"\r\n                        label=\"E-Mail  \"\r\n                        placeholder=\"Enter Valid Email\"\r\n                        type=\"email\"\r\n                        errorMessage=\"Invalid Email\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          email: { value: true }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"digits\"\r\n                        label=\"Digits  \"\r\n                        placeholder=\"Enter Only Digits\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Enter Only Digits\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[0-9]+$\",\r\n                            errorMessage: \"Only Digits\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"number\"\r\n                        label=\"Number  \"\r\n                        placeholder=\"Enter Only number\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Enter Only Number\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[0-9]+$\",\r\n                            errorMessage: \"Only Numbers\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"alphanumeric\"\r\n                        label=\"Alphanumeric  \"\r\n                        placeholder=\"Enter Only alphanumeric value\"\r\n                        type=\"text\"\r\n                        errorMessage=\"Enter Only Alphanumeric\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[0-9a-zA-Z]+$\",\r\n                            errorMessage: \"Only Alphanumeric\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <FormGroup className=\"mb-0\">\r\n                        <div>\r\n                          <Button type=\"submit\" color=\"primary\" className=\"mr-1\">\r\n                            Submit\r\n                        </Button>{\" \"}\r\n                          <Button type=\"reset\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </AvForm>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n\r\n              <Col lg={6}>\r\n                <Card>\r\n                  <CardBody>\r\n                    <h4 className=\"card-title\">Range validation</h4>\r\n                    <p className=\"card-title-desc\">\r\n                      Parsley is a availity reactstrap validation. It helps you\r\n                      provide your users with feedback on their form submission\r\n                      before sending it to your server.\r\n                  </p>\r\n\r\n                    <AvForm>\r\n                      <AvField\r\n                        name=\"Min_Length\"\r\n                        label=\"Min Length  \"\r\n                        placeholder=\"Min 6 chars\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Min 6 chars.\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          minLength: { value: 6, errorMessage: \"Min 6 chars.\" }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Max_Length\"\r\n                        label=\"Max Length  \"\r\n                        placeholder=\"Max 6 chars\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Max 6 chars.\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          maxLength: { value: 6, errorMessage: \"Max 6 chars.\" }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Range_Length\"\r\n                        label=\"Range Length  \"\r\n                        placeholder=\"Text between 5 - 10 chars length\"\r\n                        type=\"text\"\r\n                        errorMessage=\"range between 5 to 10\"\r\n                        validate={{ required: { value: true },\r\n                        minLength: { value: 5 },\r\n                        maxLength: { value: 10 }\r\n                      }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Min_Value\"\r\n                        label=\"Min Value  \"\r\n                        placeholder=\"Min 6 Chars\"\r\n                        min={6}\r\n                        type=\"text\"\r\n                        errorMessage=\"Min Value 6\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          min: { value: 6 }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Max_Value\"\r\n                        label=\"Max Value  \"\r\n                        placeholder=\"max 5 Chars\"\r\n                        max={6}\r\n                        type=\"number\"\r\n                        errorMessage=\"Max Value 6\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          max: { value: 6 }\r\n                        }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Range_Value\"\r\n                        label=\"Range Value  \"\r\n                        placeholder=\"This value should be between 6 and 100.\"\r\n                        type=\"number\"\r\n                        errorMessage=\"range between 5 to 10\"\r\n                        validate={{ required: { value: true },\r\n                        min: { value: 6 },\r\n                        max: { value: 100 }\r\n                      }}\r\n                      />\r\n                      <AvField\r\n                        name=\"Regular_Exp\"\r\n                        label=\"Regular Exp  \"\r\n                        placeholder=\"Hex. Color\"\r\n                        type=\"number\"\r\n                        errorMessage=\"Hex Value\"\r\n                        validate={{\r\n                          required: { value: true },\r\n                          pattern: {\r\n                            value: \"^[#0-9]+$\",\r\n                            errorMessage: \"Only Hex Value\"\r\n                          }\r\n                        }}\r\n                      />\r\n                      <FormGroup className=\"mb-0\">\r\n                        <div>\r\n                          <Button type=\"submit\" color=\"primary\" className=\"mr-1\">\r\n                            Submit\r\n                        </Button>{\" \"}\r\n                          <Button type=\"reset\" color=\"secondary\">\r\n                            Cancel\r\n                        </Button>\r\n                        </div>\r\n                      </FormGroup>\r\n                    </AvForm>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n\r\n          </Container>\r\n          </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FormValidations;\r\n"]},"metadata":{},"sourceType":"module"}