{"ast":null,"code":"import { takeEvery, fork, put, all, call } from 'redux-saga/effects'; // Login Redux States\n\nimport { CHECK_LOGIN, LOGOUT_USER } from './actionTypes';\nimport { apiError, loginUserSuccessful, logoutUserSuccess } from './actions'; // AUTH related methods\n\nimport { postLogin } from '../../../helpers/fackBackend_Helper';\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper'; //Initilize firebase\n\nconst fireBaseBackend = getFirebaseBackend(); //If user is login then dispatch redux action's are directly from here.\n\nfunction* loginUser({\n  payload: {\n    user,\n    history\n  }\n}) {\n  try {\n    if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\n      const response = yield call(fireBaseBackend.loginUser, user.username, user.password);\n      yield put(loginUserSuccessful(response));\n    } else {\n      const response = yield call(postLogin, '/post-login', {\n        username: user.username,\n        password: user.password\n      });\n      localStorage.setItem(\"authUser\", JSON.stringify(response));\n      yield put(loginUserSuccessful(response));\n    }\n\n    history.push('/dashboard');\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nfunction* logoutUser({\n  payload: {\n    history\n  }\n}) {\n  try {\n    localStorage.removeItem(\"authUser\");\n\n    if (process.env.REACT_APP_DEFAULTAUTH === 'firebase') {\n      const response = yield call(fireBaseBackend.logout);\n      yield put(logoutUserSuccess(response));\n    }\n\n    history.push('/login');\n  } catch (error) {\n    yield put(apiError(error));\n  }\n}\n\nexport function* watchUserLogin() {\n  yield takeEvery(CHECK_LOGIN, loginUser);\n}\nexport function* watchUserLogout() {\n  yield takeEvery(LOGOUT_USER, logoutUser);\n}\n\nfunction* loginSaga() {\n  yield all([fork(watchUserLogin), fork(watchUserLogout)]);\n}\n\nexport default loginSaga;","map":{"version":3,"sources":["/Users/tanmaymoharana/Documents/projects/industrial/dashboard/src/store/auth/login/saga.js"],"names":["takeEvery","fork","put","all","call","CHECK_LOGIN","LOGOUT_USER","apiError","loginUserSuccessful","logoutUserSuccess","postLogin","getFirebaseBackend","fireBaseBackend","loginUser","payload","user","history","process","env","REACT_APP_DEFAULTAUTH","response","username","password","localStorage","setItem","JSON","stringify","push","error","logoutUser","removeItem","logout","watchUserLogin","watchUserLogout","loginSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,IAApC,QAAgD,oBAAhD,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;AACA,SAASC,QAAT,EAAmBC,mBAAnB,EAAwCC,iBAAxC,QAAiE,WAAjE,C,CAEA;;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,kBAAT,QAAmC,kCAAnC,C,CAEA;;AACA,MAAMC,eAAe,GAAGD,kBAAkB,EAA1C,C,CAEA;;AACA,UAAUE,SAAV,CAAoB;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR;AAAX,CAApB,EAAoD;AAC5C,MAAI;AACA,QAAGC,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAAzC,EAAqD;AACjD,YAAMC,QAAQ,GAAG,MAAMhB,IAAI,CAACQ,eAAe,CAACC,SAAjB,EAA4BE,IAAI,CAACM,QAAjC,EAA2CN,IAAI,CAACO,QAAhD,CAA3B;AACA,YAAMpB,GAAG,CAACM,mBAAmB,CAACY,QAAD,CAApB,CAAT;AACH,KAHD,MAIK;AACD,YAAMA,QAAQ,GAAG,MAAMhB,IAAI,CAACM,SAAD,EAAY,aAAZ,EAA2B;AAACW,QAAAA,QAAQ,EAAEN,IAAI,CAACM,QAAhB;AAA0BC,QAAAA,QAAQ,EAAEP,IAAI,CAACO;AAAzC,OAA3B,CAA3B;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeN,QAAf,CAAjC;AACA,YAAMlB,GAAG,CAACM,mBAAmB,CAACY,QAAD,CAApB,CAAT;AACH;;AACDJ,IAAAA,OAAO,CAACW,IAAR,CAAa,YAAb;AACH,GAXD,CAWE,OAAOC,KAAP,EAAc;AACZ,UAAM1B,GAAG,CAACK,QAAQ,CAACqB,KAAD,CAAT,CAAT;AACH;AACR;;AAED,UAAUC,UAAV,CAAqB;AAAEf,EAAAA,OAAO,EAAE;AAAEE,IAAAA;AAAF;AAAX,CAArB,EAA+C;AAC3C,MAAI;AACAO,IAAAA,YAAY,CAACO,UAAb,CAAwB,UAAxB;;AAEA,QAAIb,OAAO,CAACC,GAAR,CAAYC,qBAAZ,KAAsC,UAA1C,EAAsD;AAClD,YAAMC,QAAQ,GAAG,MAAMhB,IAAI,CAACQ,eAAe,CAACmB,MAAjB,CAA3B;AACA,YAAM7B,GAAG,CAACO,iBAAiB,CAACW,QAAD,CAAlB,CAAT;AACH;;AAEDJ,IAAAA,OAAO,CAACW,IAAR,CAAa,QAAb;AACH,GATD,CASE,OAAOC,KAAP,EAAc;AACZ,UAAM1B,GAAG,CAACK,QAAQ,CAACqB,KAAD,CAAT,CAAT;AACH;AACJ;;AAED,OAAO,UAAUI,cAAV,GAA2B;AAC9B,QAAMhC,SAAS,CAACK,WAAD,EAAcQ,SAAd,CAAf;AACH;AAED,OAAO,UAAUoB,eAAV,GAA4B;AAC/B,QAAMjC,SAAS,CAACM,WAAD,EAAcuB,UAAd,CAAf;AACH;;AAED,UAAUK,SAAV,GAAsB;AAClB,QAAM/B,GAAG,CAAC,CACNF,IAAI,CAAC+B,cAAD,CADE,EAEN/B,IAAI,CAACgC,eAAD,CAFE,CAAD,CAAT;AAIH;;AAED,eAAeC,SAAf","sourcesContent":["import { takeEvery, fork, put, all, call } from 'redux-saga/effects';\r\n\r\n// Login Redux States\r\nimport { CHECK_LOGIN, LOGOUT_USER } from './actionTypes';\r\nimport { apiError, loginUserSuccessful, logoutUserSuccess } from './actions';\r\n\r\n// AUTH related methods\r\nimport { postLogin } from '../../../helpers/fackBackend_Helper';\r\nimport { getFirebaseBackend } from '../../../helpers/firebase_helper';\r\n\r\n//Initilize firebase\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n//If user is login then dispatch redux action's are directly from here.\r\nfunction* loginUser({ payload: { user, history } }) {\r\n        try {\r\n            if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n                const response = yield call(fireBaseBackend.loginUser, user.username, user.password);\r\n                yield put(loginUserSuccessful(response));\r\n            }\r\n            else {\r\n                const response = yield call(postLogin, '/post-login', {username: user.username, password: user.password});\r\n                localStorage.setItem(\"authUser\", JSON.stringify(response));\r\n                yield put(loginUserSuccessful(response));\r\n            }\r\n            history.push('/dashboard');\r\n        } catch (error) {\r\n            yield put(apiError(error));\r\n        }\r\n}\r\n\r\nfunction* logoutUser({ payload: { history } }) {\r\n    try {\r\n        localStorage.removeItem(\"authUser\");\r\n\r\n        if (process.env.REACT_APP_DEFAULTAUTH === 'firebase') {\r\n            const response = yield call(fireBaseBackend.logout);\r\n            yield put(logoutUserSuccess(response));\r\n        }\r\n\r\n        history.push('/login');\r\n    } catch (error) {\r\n        yield put(apiError(error));\r\n    }\r\n}\r\n\r\nexport function* watchUserLogin() {\r\n    yield takeEvery(CHECK_LOGIN, loginUser)\r\n}\r\n\r\nexport function* watchUserLogout() {\r\n    yield takeEvery(LOGOUT_USER, logoutUser)\r\n}\r\n\r\nfunction* loginSaga() {\r\n    yield all([\r\n        fork(watchUserLogin),\r\n        fork(watchUserLogout),\r\n    ]);\r\n}\r\n\r\nexport default loginSaga;"]},"metadata":{},"sourceType":"module"}